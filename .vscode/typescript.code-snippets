{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"GQLClient Mutation": {
		"prefix": "gqlmutation",
		"body": [
			"async function ${1:mutationName}(${2:paramName}:{${3}}):Promise<${4}>{",
			"\ttry {",
			"\t\tlet response = await GQLClient.mutate<{}>(",
			"\t\t\tgql``,",
			"\t\t\t{}",
			"\t\t)",
			"\t\tif (response.errors) throw response.errors",
			"\t\tif (!response.data) throw \"Unable to ${5:error}\"",
			"\t\treturn response.data${6}",
			"\t} catch (error) {",
			"\t\tConsole.error(error)",
			"\t\tthrow error.toString()",
			"\t}",
			"}${0}"
		],
		"description": "GQL Mutation function"
	},
	"GQLClient Query": {
		"prefix": "gqlquery",
		"body": [
			"async function ${1:queryName}(${2:paramName}:{${3}}):Promise<${4}>{",
			"\ttry {",
			"\t\tlet response = await GQLClient.query<{}>(",
			"\t\t\tgql``,",
			"\t\t\t{}",
			"\t\t)",
			"\t\tif (response.errors) throw response.errors",
			"\t\tif (!response.data) throw \"Unable to ${5:error}\"",
			"\t\treturn response.data${6}",
			"\t} catch (error) {",
			"\t\tConsole.error(error)",
			"\t\tthrow error.toString()",
			"\t}",
			"}${0}"
		],
		"description": "GQL Query function"
	}
}